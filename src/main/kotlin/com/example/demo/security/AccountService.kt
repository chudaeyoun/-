package com.example.demo.securityimport com.example.demo.account.Accountimport com.example.demo.account.AccountRepositoryimport org.springframework.beans.factory.annotation.Autowiredimport org.springframework.security.core.authority.SimpleGrantedAuthorityimport org.springframework.security.core.userdetails.Userimport org.springframework.security.core.userdetails.UserDetailsimport org.springframework.security.core.userdetails.UserDetailsServiceimport org.springframework.security.core.userdetails.UsernameNotFoundExceptionimport org.springframework.security.crypto.password.PasswordEncoderimport org.springframework.stereotype.Serviceimport java.util.*@Serviceclass AccountService: UserDetailsService {    @Autowired    private lateinit var accountRepository: AccountRepository    @Autowired    private lateinit var passwordEncoder: PasswordEncoder    fun createAccount(username: String, password: String): Account {        val account = Account(0, username, passwordEncoder.encode(password))        return accountRepository.save(account)    }    override fun loadUserByUsername(username: String): UserDetails {        val account = accountRepository.findByUsername(username) ?: throw UsernameNotFoundException("유저 없다")        return User(account.username, account.password, authorities())    }    private fun authorities(): List<SimpleGrantedAuthority> {        return listOf(SimpleGrantedAuthority("ROLE_USER"))    }}